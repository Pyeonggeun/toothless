<?xml version="1.0" encoding="UTF-8"?>
<!-- 아래 코드를 넣음으로 URL로 접속하여 dtd를 다운받고 필요기능들을 가져옴 -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mkfactory.toothless.e.registercounselor.mapper.RegisterCounselorSqlMapper">

	<!-- 외부사용자 PK생성 -->
	<select id="createExternalPk" resultType="int">
		SELECT tl_jic_external_info_seq.nextval FROM dual
	</select>
	
	<!-- 공통 외부사용자 테이블 insert-->
	<insert id="insertExternalInfo">
		INSERT INTO tl_jic_external_info VALUES(
			#{external_pk},
			#{external_id},
			#{password},
			3,
			SYSDATE
		)
	</insert>
	
	<!-- 상담원 PK 생성 -->
	<select id="createCounselorPk" resultType="int">
		SELECT cp_counselor_seq.nextval FROM dual
	</select>
	
	<!-- 상담원 신규 등록 -->
	<insert id="insertCounselor">
		INSERT INTO CP_COUNSELOR cc VALUES (
			#{id},
			#{external_pk},
			#{name},
			#{age},
			#{gender},
			#{phonenumber},
			#{email},
			#{address},
			#{career},
			#{profileImage},
			SYSDATE
		)	
	</insert>
	
	<!-- 상담원 전체 리스팅 -->
	<select id="selectAllCounselor" resultType="map">
		SELECT 
			cc.id AS id,
			cct.type_category_id AS typecategory,
			cc.name AS name,
			cc.age AS age,
			cc.GENDER AS gender,
			cc.PHONENUMBER AS phonenumber,
			cc.EMAIL AS email,
			cc.address AS address,
			cc.CAREER AS career,
			cc.PROFILEIMAGE AS profileImage
		FROM CP_COUNSELOR_TYPE cct
		INNER JOIN CP_COUNSELOR cc ON cc.id = cct.counselor_id
		ORDER BY type_category_id ASC
	</select>
	
	<!-- 상담원 전체 중복제거 리스팅 for AJAX -->
	<select id="selectAllCounselorForAJAX" resultType="map">
		SELECT  
		    main.id AS id,
		    main.name AS name,
		    main.typecategory AS typecategory,
		    nvl(main.SCOREAVG, 0) AS SCOREAVG,
		    main.age AS age,
		    main.gender AS gender,
		    main.phonenumber AS phonenumber,
		    main.email AS email,
		    main.address AS address,
		    main.career AS career,
		    main.profileImage AS profileImage
		FROM (
		    SELECT  
		        cc.id AS id,
		        cc.name AS name,
		        cct.type_category_id AS typecategory,
		        AVG(counselorsb.score) AS SCOREAVG,
		        cc.age AS age,
		        cc.GENDER AS gender,
		        cc.PHONENUMBER AS phonenumber,
		        cc.EMAIL AS email,
		        cc.address AS address,
		        cc.CAREER AS career,
		        cc.PROFILEIMAGE AS profileImage,
		        ROW_NUMBER() OVER (PARTITION BY cc.name ORDER BY cct.type_category_id DESC) AS rn
		    FROM CP_COUNSELOR cc
		    LEFT JOIN CP_COUNSELOR_TYPE cct ON cc.id = cct.counselor_id
		    INNER JOIN (
		        SELECT
		            cgc2.COUNSELOR_ID AS counselor_id,
		            cgs.SCORE AS score 
		        FROM CP_GROUP_SURVEY cgs
		        INNER JOIN CP_GROUP_RESERVATION cgr ON cgr.ID = cgs.GROUP_RESERVATION_ID
		        INNER JOIN CP_GROUP_COUNSEL cgc ON cgc.id = cgr.GROUP_COUNSEL_ID
		        INNER JOIN CP_GROUP_COUNSELOR cgc2 ON cgc2.GROUP_COUNSEL_ID = cgc.id
		        UNION
		        SELECT
		            cor.COUNSELOR_ID AS counselor_id,
		            coss.SCORE AS score
		        FROM CP_OFFLINE_RESERVATION cor
		        INNER JOIN CP_OFFLINE_SURVEY coss ON coss.RESERVATION_ID = cor.id
		    ) counselorsb ON counselorsb.COUNSELOR_ID = cc.id		    
			GROUP BY cc.id, cc.name, cct.type_category_id, cc.age, cc.GENDER, cc.PHONENUMBER, cc.EMAIL, cc.address, cc.CAREER, cc.PROFILEIMAGE
			) main			    
	        <if test="searchOption == true">
	        WHERE 1=1
	            <choose>
	                <when test="searchCounselorName.equals('default')">
	                    AND main.name LIKE '%' || #{searchCounselorName} || '%'	                    
	                </when>
	                <when test="searchCounselorType != 0">
	                    AND main.typecategory = #{searchCounselorType}
	                </when>
	                <when test="!searchGenderOption.equals('default') and !searchGenderOption.equals('A')">
	                    AND main.gender = #{searchGenderOption}
	                </when>
	            </choose>
	        </if>
	        AND main.rn = 1	    										
			<if test="searchOption == true and !searchScoreOption.equals('default')">
				<choose>
					<when test="searchScoreOption == 'scoreDESC'">
						ORDER BY scoreAVG DESC NULLS LAST
					</when>
					<when test="searchScoreOption == 'scoreASC'">
						ORDER BY scoreAVG ASC NULLS LAST
					</when>
				</choose>
			</if>		
	</select>
	
	<!-- 상담원 PK로 상담원정보 조회 -->
	<select id="selectCounselorDetailByCounselorId" resultType="com.mkfactory.toothless.e.dto.CounselorDto">
		SELECT * FROM CP_COUNSELOR WHERE id = #{id}
	</select>
	
	<!-- 상담카테고리 리스팅 -->
	<select id="selectAllTypeCategory" resultType="com.mkfactory.toothless.e.dto.TypeCategoryDto">
		SELECT * FROM cp_type_category
	</select>
	
	<!-- 상담원별 담당카테고리 정보 인서트 -->
	<insert id="insertCounselorType">
		INSERT INTO cp_counselor_type VALUES (
			cp_counselor_type_seq.nextval,
			#{counselor_id},
			#{type_category_id},
			SYSDATE
		)
	</insert>
	
	<!-- 상담원PK로 담당카테고리 정보 셀렉트 -->
	<select id="selectCounselorTypeByCounselorId" resultType="map">
		SELECT 
			cct.TYPE_CATEGORY_ID AS id,
			ctc.NAME AS categoryname
		FROM CP_COUNSELOR_TYPE cct
		INNER JOIN CP_TYPE_CATEGORY ctc ON ctc.id = cct.TYPE_CATEGORY_ID  
		WHERE COUNSELOR_ID = #{id}
	</select>
	
	<!-- 상담원 자격증 이미지 등록 -->
	<insert id="insertLicenseImage">
		INSERT INTO cp_license_image VALUES(
			cp_license_image_seq.nextval,
			#{counselor_id},
			#{license}
		)
	</insert>
	
	<!-- 상담원PK로 상담원 자격증 이미지 리스팅 -->
	<select id="selectLicenseImgByCounselorId" resultType="com.mkfactory.toothless.e.dto.LicenseImageDto">
		SELECT * FROM cp_license_image
		WHERE counselor_id = #{counselor_id} 
	</select>
	
	<!-- 상담사PK로 상담사 오프라인 평점현황 조회 -->
	<select id="selectOfflineSurveyScoreByCounselorId" resultType="map">
		SELECT 
			cor.COUNSELOR_ID AS counselor,
			count(CASE WHEN coss.SCORE = 1 THEN 1 end) AS score1,
			count(CASE WHEN coss.SCORE = 2 THEN 1 end) AS score2,
			count(CASE WHEN coss.SCORE = 3 THEN 1 end) AS score3,
			count(CASE WHEN coss.SCORE = 4 THEN 1 end) AS score4,
			count(CASE WHEN coss.SCORE = 5 THEN 1 end) AS score5
		FROM CP_OFFLINE_RESERVATION cor
		INNER JOIN CP_OFFLINE_SURVEY coss ON coss.RESERVATION_ID = cor.id
		GROUP BY cor.COUNSELOR_ID HAVING cor.COUNSELOR_ID = #{counserlor_id}
	</select>
	
	<!-- 상담사PK로 오프라인상담 완료현황 조회 -->
	<select id="selectCompleteOfflineCounselListByCounselorId" resultType="map">
		SELECT 
			cor.id AS ID,
			ctc.name AS category,
			cor.COUNSEL_YEAR AS cYEAR,
			cor.COUNSEL_MONTH AS cMONTH,
			cor.COUNSEL_DATE AS cdate
		FROM CP_OFFLINE_RESERVATION cor
		INNER JOIN CP_TYPE_CATEGORY ctc ON ctc.ID = cor.TYPE_CATEGORY_ID 
		WHERE 1=1
		AND STATE = '완료'
		AND COUNSELOR_ID = #{counselor_id}
		ORDER BY id ASC
	</select>
	
	<!-- 상담사PK로 오프라인상담 평점 조회 -->
	<select id="selectOfflineCounselScoreAvg" resultType="double">
		SELECT avg(coss.score) AS scoreAvg
		FROM CP_OFFLINE_RESERVATION cor
		INNER JOIN CP_OFFLINE_SURVEY coss ON coss.RESERVATION_ID = cor.id
		WHERE cor.COUNSELOR_ID = #{counselor_id}
	</select>
	
	
	
	

</mapper>