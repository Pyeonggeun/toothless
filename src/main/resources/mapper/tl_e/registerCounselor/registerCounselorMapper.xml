<?xml version="1.0" encoding="UTF-8"?>
<!-- 아래 코드를 넣음으로 URL로 접속하여 dtd를 다운받고 필요기능들을 가져옴 -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mkfactory.toothless.e.registercounselor.mapper.RegisterCounselorSqlMapper">

	<!-- 외부사용자 PK생성 -->
	<select id="createExternalPk" resultType="int">
		SELECT tl_jic_external_info_seq.nextval FROM dual
	</select>
	
	<!-- 공통 외부사용자 테이블 insert-->
	<insert id="insertExternalInfo">
		INSERT INTO tl_jic_external_info VALUES(
			#{external_pk},
			#{external_id},
			#{password},
			3,
			SYSDATE
		)
	</insert>
	
	<!-- 상담원 PK 생성 -->
	<select id="createCounselorPk" resultType="int">
		SELECT cp_counselor_seq.nextval FROM dual
	</select>
	
	<!-- 상담원 신규 등록 -->
	<insert id="insertCounselor">
		INSERT INTO CP_COUNSELOR cc VALUES (
			#{id},
			#{external_pk},
			#{name},
			#{age},
			#{gender},
			#{phonenumber},
			#{email},
			#{address},
			#{career},
			#{profileImage},
			SYSDATE
		)	
	</insert>
	
	<!-- 상담원 전체 리스팅 -->
	<select id="selectAllCounselor" resultType="map">
		SELECT 
			cc.id AS id,
			cct.type_category_id AS typecategory,
			cc.name AS name,
			cc.age AS age,
			cc.GENDER AS gender,
			cc.PHONENUMBER AS phonenumber,
			cc.EMAIL AS email,
			cc.address AS address,
			cc.CAREER AS career,
			cc.PROFILEIMAGE AS profileImage
		FROM CP_COUNSELOR_TYPE cct
		INNER JOIN CP_COUNSELOR cc ON cc.id = cct.counselor_id
		ORDER BY type_category_id ASC
	</select>
	
	<!-- 상담원 전체 중복제거 리스팅 for AJAX -->
	<select id="selectAllCounselorForAJAX" resultType="map">
		SELECT *
		FROM(
		SELECT
			ROW_NUMBER () OVER (PARTITION BY mainView.counselorId ORDER BY mainView.category) mainRn,
			mainView.category AS category,	
			mainView.counselorId AS counselorId,
			mainView.name AS name,
			mainView.age AS age,
			mainView.gender AS gender,
			mainView.phonenumber AS phonenumber,
			mainView.email AS email,
			mainView.address AS address,
			mainView.career AS career,
			mainView.profileimage AS profileImage,
			mainView.scoreAvg AS scoreAvg
		FROM (
		SELECT
			counselorTB.rn AS rn,
			counselorTB.category AS category,
			counselorTB.id AS counselorId,
			counselorTB.name AS name,
			counselorTB.age AS age,
			counselorTB.gender AS gender,
			counselorTB.phonenumber AS phonenumber,
			counselorTB.email AS email,
			counselorTB.address AS address,
			counselorTB.career AS career,
			counselorTB.profileimage AS profileImage,
			nvl(scoreTB.scoreAvg, 0) AS scoreAvg
		FROM (
			SELECT 
				ROW_NUMBER () OVER (PARTITION BY cct.TYPE_CATEGORY_ID ORDER BY cc.id ASC) rn,
				cct.TYPE_CATEGORY_ID AS category,
				cc.*
			FROM CP_COUNSELOR_TYPE cct
			INNER JOIN CP_COUNSELOR cc ON cc.id = cct.counselor_id
			) counselorTB
		LEFT JOIN (
			SELECT 
			counselor_id,
			avg(scoreAvg) AS scoreAvg
			FROM (
				SELECT
					cgc2.COUNSELOR_ID AS counselor_id,
					avg(cgs.SCORE) AS scoreAvg
				FROM CP_GROUP_SURVEY cgs
				INNER JOIN CP_GROUP_RESERVATION cgr ON cgr.ID = cgs.GROUP_RESERVATION_ID
				INNER JOIN CP_GROUP_COUNSEL cgc ON cgc.id = cgr.GROUP_COUNSEL_ID
				INNER JOIN CP_GROUP_COUNSELOR cgc2 ON cgc2.GROUP_COUNSEL_ID = cgc.id
				GROUP BY cgc2.COUNSELOR_ID
				UNION
				SELECT 
					cor.COUNSELOR_ID AS counselor_id,
					avg(coss.SCORE) AS scoreAvg
				FROM CP_OFFLINE_RESERVATION cor
				INNER JOIN CP_OFFLINE_SURVEY coss ON coss.RESERVATION_ID = cor.id
				GROUP BY cor.COUNSELOR_ID 
				UNION	
				SELECT 
					counselor_id,
					scoreAvg
				FROM (
					SELECT 
						cocr.counselor_id AS counselor_id,
						avg(cocs.SCORE) AS scoreAvg
					FROM CP_ONLINE_COUNSEL_SURVEY cocs
					INNER JOIN CP_ONLINE_COUNSEL_BOARD cocb ON cocb.id = cocs.ONLINE_COUNSEL_BOARD_ID
					INNER JOIN CP_ONLINE_COUNSEL_REPLY cocr ON cocb.ID = cocr.ONLINE_COUNSEL_BOARD_ID
					GROUP BY cocr.counselor_id
					) 
				)
				GROUP BY counselor_id
				ORDER BY counselor_id asc
			) scoreTB ON counselorTB.id = scoreTB.counselor_id			
		<choose>
			<when test="searchOption == true">			
				WHERE 1 = 1		
				<if test="!searchCounselorName.equals('default')">
					AND name LIKE '%' || #{searchCounselorName} || '%'				
				</if>
				<if test="searchCounselorType != null and searchCounselorType.length > 0">
					AND category IN
					<foreach collection="searchCounselorType" item="type" open="(" separator="," close=")">
						#{type}
					</foreach>						
				</if>
				<if test="!searchGenderOption.equals('default')">
					AND gender = #{searchGenderOption}
				</if>
				<!-- <if test="searchOption == true and !searchCounselorName.equals('default')">
					and rn = 1
				</if>
				<if test="
					searchOption == true and
					searchCounselorName.equals('default') and
					searchCounselorType != null and searchCounselorType.length == 0 and
					!searchGenderOption.equals('default')
					">
					and rn = 1
				</if>
				<if test="
					searchOption == true and
					searchCounselorName.equals('default') and
					searchCounselorType != null and searchCounselorType.length == 0 and
					searchGenderOption.equals('default') and
					!searchScoreOption.equals('default')
					">
					and rn = 1
				</if>
				<if test="
					searchOption == true and
					searchCounselorName.equals('default') and
					searchCounselorType != null and searchCounselorType.length == 0 and
					!searchGenderOption.equals('default') and
					!searchScoreOption.equals('default')
					">
					and rn = 1
				</if> -->				
			</when>
		</choose>
		) mainView
		) ranked
		WHERE mainrn = 1
		<if test="!searchScoreOption.equals('default') and !searchScoreOption.equals('scoreASC')">			
			ORDER BY SCOREAVG ASC
		</if>
		<if test="!searchScoreOption.equals('default') and !searchScoreOption.equals('scoreDESC')">
			ORDER BY SCOREAVG DESC
		</if>		
	</select>
	
	<!-- 상담원 PK로 상담원정보 조회 -->
	<select id="selectCounselorDetailByCounselorId" resultType="com.mkfactory.toothless.e.dto.CounselorDto">
		SELECT
		* 
		FROM CP_COUNSELOR
		WHERE id = #{id}
	</select>
	
	<!-- 상담카테고리 리스팅 -->
	<select id="selectAllTypeCategory" resultType="com.mkfactory.toothless.e.dto.TypeCategoryDto">
		SELECT * FROM cp_type_category
	</select>
	
	<!-- 상담원별 담당카테고리 정보 인서트 -->
	<insert id="insertCounselorType">
		INSERT INTO cp_counselor_type VALUES (
			cp_counselor_type_seq.nextval,
			#{counselor_id},
			#{type_category_id},
			SYSDATE
		)
	</insert>
	
	<!-- 상담원PK로 담당카테고리 정보 셀렉트 -->
	<select id="selectCounselorTypeByCounselorId" resultType="map">
		SELECT 
			cct.TYPE_CATEGORY_ID AS id,
			ctc.NAME AS categoryname
		FROM CP_COUNSELOR_TYPE cct
		INNER JOIN CP_TYPE_CATEGORY ctc ON ctc.id = cct.TYPE_CATEGORY_ID  
		WHERE COUNSELOR_ID = #{id}
	</select>
	
	<!-- 상담원 자격증 이미지 등록 -->
	<insert id="insertLicenseImage">
		INSERT INTO cp_license_image VALUES(
			cp_license_image_seq.nextval,
			#{counselor_id},
			#{license}
		)
	</insert>
	
	<!-- 상담원PK로 상담원 자격증 이미지 리스팅 -->
	<select id="selectLicenseImgByCounselorId" resultType="com.mkfactory.toothless.e.dto.LicenseImageDto">
		SELECT * FROM cp_license_image
		WHERE counselor_id = #{counselor_id} 
	</select>
	
	<!-- 상담사PK로 상담사 오프라인 평점현황 조회 -->
	<select id="selectOfflineSurveyScoreByCounselorId" resultType="map">
		SELECT 
			cor.COUNSELOR_ID AS counselor,
			count(CASE WHEN coss.SCORE = 1 THEN 1 end) AS score1,
			count(CASE WHEN coss.SCORE = 2 THEN 1 end) AS score2,
			count(CASE WHEN coss.SCORE = 3 THEN 1 end) AS score3,
			count(CASE WHEN coss.SCORE = 4 THEN 1 end) AS score4,
			count(CASE WHEN coss.SCORE = 5 THEN 1 end) AS score5
		FROM CP_OFFLINE_RESERVATION cor
		INNER JOIN CP_OFFLINE_SURVEY coss ON coss.RESERVATION_ID = cor.id
		GROUP BY cor.COUNSELOR_ID HAVING cor.COUNSELOR_ID = #{counserlor_id}
	</select>
	
	<!-- 상담사PK로 오프라인상담 완료현황 조회 -->
	<select id="selectCompleteOfflineCounselListByCounselorId" resultType="map">
		SELECT 
			cor.id AS ID,
			ctc.name AS category,
			cor.COUNSEL_YEAR AS cYEAR,
			cor.COUNSEL_MONTH AS cMONTH,
			cor.COUNSEL_DATE AS cdate
		FROM CP_OFFLINE_RESERVATION cor
		INNER JOIN CP_TYPE_CATEGORY ctc ON ctc.ID = cor.TYPE_CATEGORY_ID 
		WHERE 1=1
		AND STATE = '완료'
		AND COUNSELOR_ID = #{counselor_id}
		ORDER BY id ASC
	</select>
	
	<!-- 상담사PK로 오프라인상담 평점 조회 -->
	<select id="selectOfflineCounselScoreAvg" resultType="double">
		SELECT avg(coss.score) AS scoreAvg
		FROM CP_OFFLINE_RESERVATION cor
		INNER JOIN CP_OFFLINE_SURVEY coss ON coss.RESERVATION_ID = cor.id
		WHERE cor.COUNSELOR_ID = #{counselor_id}
	</select>
	
	<!-- 상담원 신규등록시 중복확인 -->
	<select id="checkDuplicationExternalId" resultType="int">
		SELECT count(*) FROM TL_JIC_EXTERNAL_INFO		
		WHERE EXTERNAL_ID LIKE #{inputId}
	</select>
	
	<!-- 상담원PK로 해당 상담사가 완료한 상담리스트 및 참여한 집단상담리스트 -->
	<select id="selectCompleteCounselListByCounselorId" resultType="map">
		SELECT
			cc.id AS counselorId,
			completeList.boardType AS counselBoardType,
			completeList.counselNo AS counselNo,
			completeList.counselType AS counselType,
			completeList.counselDate AS counselDate
		FROM CP_COUNSELOR cc
		INNER JOIN (
				SELECT
				1 AS boardType,
				cor.COUNSELOR_ID AS counselorId, 
				cor.id AS counselNo,
				ctc.NAME AS counselType,
				cor.COUNSEL_YEAR || '-' ||cor.COUNSEL_MONTH || '-' || cor.COUNSEL_DAY AS counselDate
			FROM CP_OFFLINE_RESERVATION cor
			INNER JOIN CP_COUNSELOR cc ON cc.id = cor.COUNSELOR_ID
			INNER JOIN CP_TYPE_CATEGORY ctc ON cor.TYPE_CATEGORY_ID = ctc.ID 
			WHERE cor.STATE = '완료'
			UNION 
			SELECT
				2 AS boardType,
				cocr.COUNSELOR_ID AS counselorId,
				cocb.id AS counselNo,
				ctc.NAME AS counselType,
				TO_CHAR(cocb.CREATED_AT, 'yyyy-MM-dd') AS counselDate 
			FROM CP_ONLINE_COUNSEL_BOARD cocb
			INNER JOIN CP_ONLINE_COUNSEL_REPLY cocr ON cocr.ONLINE_COUNSEL_BOARD_ID = cocb.ID
			INNER JOIN CP_TYPE_CATEGORY ctc ON cocb.TYPE_CATEGORY_ID = ctc.ID
			UNION
			SELECT
				3 AS boardType,
				cgc2.COUNSELOR_ID AS counselorId,
				cgc.ID AS counselNo,
				cgc.TITLE AS counselType,
				TO_CHAR(cgc.COUNSEL_DATE, 'yyyy-mm-dd') AS counselDate  
			FROM CP_GROUP_RESERVATION cgr
			INNER JOIN CP_GROUP_COUNSEL cgc ON cgc.ID = cgr.GROUP_COUNSEL_ID
			INNER JOIN CP_GROUP_COUNSELOR cgc2 on cgc.ID = cgc2.GROUP_COUNSEL_ID
			) completeList ON completeList.counselorid = cc.ID		
		WHERE id = #{counselorId}
	</select>
	
	<!-- 미친짓 : 상담사PK기준 카테고리별 평균평점+전체평균평점+별점항목별 갯수 카운팅 -->
	<select id="selectTotalScoreInfoByCounselorId" resultType="map">
		SELECT
			cc2.ID AS counselorId,
			nvl(mainView.offAvg,0) AS offAvg,
			nvl(mainView.onAvg,0) AS onAvg,
			nvl(mainView.groupAvg,0) AS groupAvg,
			nvl(mainView.totalAvg,0) AS totalAvg,
			starRateView.score1 AS score1,
			starRateView.score2 AS score2,
			starRateView.score3 AS score3,
			starRateView.score4 AS score4,
			starRateView.score5 AS score5
		FROM CP_COUNSELOR cc2
		LEFT OUTER JOIN (
			SELECT 
				totalAvgView.counselorID AS counselorId,
				AVG(categoryAvgView.offavg) AS offAvg,
				AVG(categoryAvgView.onAvg) AS onAvg,
				AVG(categoryAvgView.groupAvg) AS groupAvg,
				TRUNC(AVG(totalAvgView.score),2) AS totalAvg
			FROM (
				SELECT 	
					cor.counselor_id AS counselorId,
					cos2.SCORE AS score
				FROM CP_OFFLINE_RESERVATION cor 
				INNER JOIN CP_OFFLINE_SURVEY cos2 ON cos2.RESERVATION_ID = cor.id
				WHERE cor.STATE = '완료'
				UNION ALL 
				SELECT
					cocr.COUNSELOR_ID AS counselorId,
					cocs.SCORE AS score
				FROM CP_ONLINE_COUNSEL_SURVEY cocs
				INNER JOIN CP_ONLINE_COUNSEL_BOARD cocb ON cocb.ID = cocs.ONLINE_COUNSEL_BOARD_ID
				INNER JOIN CP_ONLINE_COUNSEL_REPLY cocr ON cocr.ONLINE_COUNSEL_BOARD_ID = cocb.ID 
				UNION ALL  
				SELECT
					cgc2.COUNSELOR_ID AS counselorId,
					cgs.SCORE AS score
				FROM CP_GROUP_SURVEY cgs 
				INNER JOIN CP_GROUP_RESERVATION cgr ON cgr.ID = cgs.GROUP_RESERVATION_ID
				INNER JOIN CP_GROUP_COUNSEL cgc ON cgc.ID = cgr.group_counsel_id
				INNER JOIN CP_GROUP_COUNSELOR cgc2 ON cgc2.GROUP_COUNSEL_ID = cgc.ID
				) totalAvgView
			INNER JOIN (
				SELECT
					cc.id AS counselorId,
					nvl(offlineData.offlineAvg,0) AS offAvg,
					nvl(onlineData.onlineAvg,0) AS onAvg,
					nvl(TRUNC(groupData.groupAvg, 2),0) AS groupAvg	
				FROM CP_COUNSELOR cc 
				LEFT OUTER JOIN (
					SELECT 	
					max(cor.counselor_id) AS counselorId,
					nvl(avg(cos2.SCORE),0) AS offlineAvg
					FROM CP_OFFLINE_RESERVATION cor 
					INNER JOIN CP_OFFLINE_SURVEY cos2 ON cos2.RESERVATION_ID = cor.id
					WHERE cor.STATE = '완료' 
					GROUP by cor.counselor_id
					) offlineData ON cc.ID = offlineData.counselorId
				LEFT OUTER JOIN (
					SELECT
					max(cocr.COUNSELOR_ID) AS counselorId,
					nvl(avg(cocs.SCORE),0) AS onlineAvg
					FROM CP_ONLINE_COUNSEL_SURVEY cocs
					INNER JOIN CP_ONLINE_COUNSEL_BOARD cocb ON cocb.ID = cocs.ONLINE_COUNSEL_BOARD_ID
					INNER JOIN CP_ONLINE_COUNSEL_REPLY cocr ON cocr.ONLINE_COUNSEL_BOARD_ID = cocb.ID 
					GROUP BY cocr.COUNSELOR_ID
					) onlineData ON cc.ID = onlineData.counselorId
				LEFT OUTER JOIN (
					SELECT
					max(cgc2.COUNSELOR_ID) AS counselorId,
					nvl(avg(cgs.SCORE),0) AS groupAvg
					FROM CP_GROUP_SURVEY cgs 
					INNER JOIN CP_GROUP_RESERVATION cgr ON cgr.ID = cgs.GROUP_RESERVATION_ID
					INNER JOIN CP_GROUP_COUNSEL cgc ON cgc.ID = cgr.group_counsel_id
					INNER JOIN CP_GROUP_COUNSELOR cgc2 ON cgc2.GROUP_COUNSEL_ID = cgc.ID 
					GROUP BY cgc2.COUNSELOR_ID 
					) groupData ON cc.ID = groupData.counselorId
				) categoryAvgView ON categoryAvgView.counselorId = totalAvgView.counselorId
			GROUP BY totalAvgView.counselorId
			ORDER BY totalAvgView.counselorId ASC
			) mainView ON mainView.counselorId = cc2.ID 
		INNER JOIN (
			SELECT
				cc.ID AS counselorID,
				nvl(sum(rateBoard.score1),0) AS score1,
				nvl(sum(rateBoard.score2),0) AS score2,
				nvl(sum(rateBoard.score3),0) AS score3,
				nvl(sum(rateBoard.score4),0) AS score4,
				nvl(sum(rateBoard.score5),0) AS score5
			FROM CP_COUNSELOR cc 
			LEFT OUTER JOIN (
				SELECT
					cgc2.COUNSELOR_ID AS counselorId,
					COUNT(CASE WHEN cgs.SCORE=1 THEN 1 END) AS SCORE1, 
					COUNT(CASE WHEN cgs.SCORE=2 THEN 1 END) AS SCORE2, 
					COUNT(CASE WHEN cgs.SCORE=3 THEN 1 END) AS SCORE3, 
					COUNT(CASE WHEN cgs.SCORE=4 THEN 1 END) AS SCORE4, 
					COUNT(CASE WHEN cgs.SCORE=5 THEN 1 END) AS SCORE5 
				FROM CP_GROUP_SURVEY cgs
				INNER JOIN CP_GROUP_RESERVATION cgr ON cgs.GROUP_RESERVATION_ID = cgr.ID 
				INNER JOIN CP_GROUP_COUNSEL cgc ON cgc.ID = cgr.GROUP_COUNSEL_ID 
				INNER JOIN CP_GROUP_COUNSELOR cgc2 ON cgc2.GROUP_COUNSEL_ID = cgc.ID
				GROUP BY cgc2.COUNSELOR_ID 
				UNION 
				SELECT
					cocr.COUNSELOR_ID AS counselorId,
					COUNT(CASE WHEN cocs.SCORE=1 THEN 1 END) AS score1,
					COUNT(CASE WHEN cocs.SCORE=2 THEN 1 END) AS score2,
					COUNT(CASE WHEN cocs.SCORE=3 THEN 1 END) AS score3,
					COUNT(CASE WHEN cocs.SCORE=4 THEN 1 END) AS score4,
					COUNT(CASE WHEN cocs.SCORE=5 THEN 1 END) AS score5
				FROM CP_ONLINE_COUNSEL_SURVEY cocs
				INNER JOIN CP_ONLINE_COUNSEL_BOARD cocb ON cocb.ID = cocs.ONLINE_COUNSEL_BOARD_ID 
				INNER JOIN CP_ONLINE_COUNSEL_REPLY cocr ON cocr.ONLINE_COUNSEL_BOARD_ID = cocb.ID
				GROUP BY cocr.COUNSELOR_ID 
				UNION 
				SELECT
					cor.COUNSELOR_ID AS counselorId,
					COUNT(CASE WHEN cos2.SCORE=1 THEN 1 END) AS score1,
					COUNT(CASE WHEN cos2.SCORE=2 THEN 1 END) AS score2,
					COUNT(CASE WHEN cos2.SCORE=3 THEN 1 END) AS score3,
					COUNT(CASE WHEN cos2.SCORE=4 THEN 1 END) AS score4,
					COUNT(CASE WHEN cos2.SCORE=5 THEN 1 END) AS score5
				FROM CP_OFFLINE_SURVEY cos2
				INNER JOIN CP_OFFLINE_RESERVATION cor ON cor.ID = cos2.RESERVATION_ID
				GROUP BY cor.COUNSELOR_ID
				)rateBoard ON rateBoard.counselorId = cc.ID
			GROUP BY cc.ID
			) starRateView ON starRateView.counselorId = cc2.ID 
		WHERE cc2.ID = #{counselorId}
	</select>
	
	<!-- counselCenterStaffMainPage 사용쿼리 -->
	<!-- 상담원 전체 상담분류별 상담완료실적 -->
	<select id="selectAllCompleteCounselList" resultType="map">
		SELECT
			RANK() OVER (ORDER BY mainView.totalcount DESC NULLS LAST) AS totalRank,
			cc.id AS id,
			cc.name AS name,
			NVL(mainView.offcount,0) AS offcount,
			NVL(mainView.oncount,0) AS oncount,
			NVL(mainView.groupcount,0) AS groupcount,
			NVL(mainView.totalCount,0) AS totalCount
		FROM CP_COUNSELOR cc 
		LEFT OUTER JOIN (
			SELECT
				COUNSELORID,
				COUNT(CASE WHEN counselboardtype=1 THEN 1 end) AS offCount,
				COUNT(CASE WHEN counselboardtype=2 THEN 1 end) AS onCount,
				COUNT(CASE WHEN counselboardtype=3 THEN 1 end) AS groupCount,
				COUNT(counselboardtype) AS totalCount
			FROM (
				SELECT
					cc.id AS counselorId,
					completeList.boardType AS counselBoardType,
					completeList.counselNo AS counselNo,
					completeList.counselType AS counselType,
					completeList.counselDate AS counselDate
				FROM CP_COUNSELOR cc
				INNER JOIN (
						SELECT
						1 AS boardType,
						cor.COUNSELOR_ID AS counselorId, 
						cor.id AS counselNo,
						ctc.NAME AS counselType,
						cor.COUNSEL_YEAR || '-' ||cor.COUNSEL_MONTH || '-' || cor.COUNSEL_DAY AS counselDate
					FROM CP_OFFLINE_RESERVATION cor
					INNER JOIN CP_COUNSELOR cc ON cc.id = cor.COUNSELOR_ID
					INNER JOIN CP_TYPE_CATEGORY ctc ON cor.TYPE_CATEGORY_ID = ctc.ID 
					WHERE cor.STATE = '완료'
					UNION 
					SELECT
						2 AS boardType,
						cocr.COUNSELOR_ID AS counselorId,
						cocb.id AS counselNo,
						ctc.NAME AS counselType,
						TO_CHAR(cocb.CREATED_AT, 'yyyy-MM-dd') AS counselDate 
					FROM CP_ONLINE_COUNSEL_BOARD cocb
					INNER JOIN CP_ONLINE_COUNSEL_REPLY cocr ON cocr.ONLINE_COUNSEL_BOARD_ID = cocb.ID
					INNER JOIN CP_TYPE_CATEGORY ctc ON cocb.TYPE_CATEGORY_ID = ctc.ID
					UNION
					SELECT
						3 AS boardType,
						cgc2.COUNSELOR_ID AS counselorId,
						cgc.ID AS counselNo,
						cgc.TITLE AS counselType,
						TO_CHAR(cgc.COUNSEL_DATE, 'yyyy-mm-dd') AS counselDate  
					FROM CP_GROUP_RESERVATION cgr
					INNER JOIN CP_GROUP_COUNSEL cgc ON cgc.ID = cgr.GROUP_COUNSEL_ID
					INNER JOIN CP_GROUP_COUNSELOR cgc2 on cgc.ID = cgc2.GROUP_COUNSEL_ID
					) completeList ON completeList.counselorid = cc.ID
				)
			GROUP BY COUNSELORID
			ORDER BY totalcount DESC  
			)mainView ON mainview.counselorid = cc.ID
	</select>
	
	<!-- 상담형태별 완료된 상담내역 카운팅 -->
	<select id="selectAllTypeCompleteCounselCountValue" resultType="map">
		SELECT
			COUNT(CASE WHEN mainview.boardType=1 THEN 1 end) AS offlineCount,
			COUNT(CASE WHEN mainview.boardType=2 THEN 1 end) AS onlineCount,
			COUNT(CASE WHEN mainview.boardType=3 THEN 1 end) AS groupCount	
		FROM (
			SELECT
				1 AS boardType,
				cor.COUNSELOR_ID AS counselorId, 
				cor.id AS counselNo,
				ctc.NAME AS counselType,
				cor.COUNSEL_YEAR || '-' ||cor.COUNSEL_MONTH || '-' || cor.COUNSEL_DAY AS counselDate
			FROM CP_OFFLINE_RESERVATION cor
			INNER JOIN CP_COUNSELOR cc ON cc.id = cor.COUNSELOR_ID
			INNER JOIN CP_TYPE_CATEGORY ctc ON cor.TYPE_CATEGORY_ID = ctc.ID 
			WHERE cor.STATE = '완료'
			UNION 
			SELECT
				2 AS boardType,
				cocr.COUNSELOR_ID AS counselorId,
				cocb.id AS counselNo,
				ctc.NAME AS counselType,
				TO_CHAR(cocb.CREATED_AT, 'yyyy-MM-dd') AS counselDate 
			FROM CP_ONLINE_COUNSEL_BOARD cocb
			INNER JOIN CP_ONLINE_COUNSEL_REPLY cocr ON cocr.ONLINE_COUNSEL_BOARD_ID = cocb.ID
			INNER JOIN CP_TYPE_CATEGORY ctc ON cocb.TYPE_CATEGORY_ID = ctc.ID
			UNION
			SELECT
				3 AS boardType,
				cgc2.COUNSELOR_ID AS counselorId,
				cgc.ID AS counselNo,
				cgc.TITLE AS counselType,
				TO_CHAR(cgc.COUNSEL_DATE, 'yyyy-mm-dd') AS counselDate  
			FROM CP_GROUP_RESERVATION cgr
			INNER JOIN CP_GROUP_COUNSEL cgc ON cgc.ID = cgr.GROUP_COUNSEL_ID
			INNER JOIN CP_GROUP_COUNSELOR cgc2 on cgc.ID = cgc2.GROUP_COUNSEL_ID
			)mainview
	</select>
	
	<!-- 집단상담 리스팅 -->
	<select id="selectGroupCounselBoardForStaffMain" resultType="map">
		SELECT
			cgc.ID AS id,
			cgc.TITLE AS title,
			to_char(cgc.CREATED_AT, 'yyyy-mm-dd') AS regDate,
			valueTb.applyValue AS applyPerson,
			cgc.AMOUNT AS maxPerson,
			<![CDATA[
			CASE 
				WHEN CGC.START_APPLY_DATE > SYSDATE THEN '미오픈'
				WHEN CGC.START_APPLY_DATE < SYSDATE AND cgc.END_APPLY_DATE > SYSDATE THEN '신청진행'
				WHEN cgc.COUNSEL_DATE > SYSDATE AND cgc.END_APPLY_DATE < SYSDATE THEN '신청마감'
				WHEN cgc.COUNSEL_DATE < SYSDATE THEN '상담종료'
			END	AS status
			]]>			
		FROM CP_GROUP_COUNSEL cgc
		INNER JOIN (
			SELECT
				cgc.id AS ID,
				count(*) AS applyValue
			FROM CP_GROUP_COUNSEL cgc 
			INNER JOIN CP_GROUP_RESERVATION cgr ON cgr.GROUP_COUNSEL_ID = cgc.ID 
			GROUP BY cgc.ID
			)valueTb ON valueTb.id = cgc.ID 
	</select>
	
	<!-- 공지사항 리스팅 -->
	<select id="selectNoticeBoardForStaffMain" resultType="map">
		SELECT
			t1.noticeid AS noticeId,
			t1.noticeTitle AS noticeTitle,
			t1.noticeReadcount AS noticeReadCount,
			t1.noticeWriter AS noticeWriter,
			t1.noticeRegdate AS noticeRegdate,
			nvl(t2.cvalue,0) AS noticeCommentValue
		FROM (
			SELECT 
				cn.id AS noticeId,
				cn.TITLE AS noticeTitle,
				cn.READ_COUNT AS noticeReadcount,
				tjsi.NAME AS noticeWriter,
				TO_CHAR(cn.CREATED_AT, 'yyyy-mm-dd') AS noticeRegdate	
			FROM CP_NOTICE cn
			INNER JOIN TL_JIC_STAFF_INFO tjsi ON tjsi.STAFF_PK  = cn.STAFF_PK
			)t1
		LEFT OUTER JOIN (
			SELECT
				NOTICE_ID AS id,
				COUNT(student_pk) AS cValue
			FROM CP_NOTICE_COMMENT cnc
			GROUP BY NOTICE_ID
			)t2 ON t2.id = t1.noticeid
		ORDER BY noticeid desc
	</select>
	
	<!-- 학생 자유게시판 리스팅 -->
	<select id="selectFreeboardForStaffMain" resultType="map">
		SELECT
			t1.id AS freeID,
			t1.title AS freeTitle,
			t1.rcount AS freeReadcount,
			t1.name AS freeWriter,
			t1.regdate AS freeRegdate,
			NVL(cmTb.commentValue, 0) AS commentValue,
			NVL(lkTb.likeValue, 0) AS likeValue
		FROM (
			SELECT
				CSF.id AS ID,
				CSF.TITLE AS Title,
				csf.READ_COUNT AS Rcount,
				tjsi.NAME  AS name,
				TO_CHAR(CSF.CREATED_AT, 'yyyy-mm-dd') AS Regdate	 
			FROM CP_STUDENT_FREEBOARD csf
			INNER JOIN TL_JIC_STUDENT_INFO tjsi ON tjsi.STUDENT_PK = csf.STUDENT_PK
			)t1
		LEFT OUTER JOIN (
			SELECT
				csf.id AS id,
				COUNT(cfc.STUDENT_PK) AS commentValue
			FROM CP_STUDENT_FREEBOARD csf 
			INNER JOIN CP_FREEBOARD_COMMENT cfc ON cfc.FREEBOARD_ID = csf.ID 
			GROUP BY csf.id
			)cmTb ON cmTb.id = t1.id
		LEFT OUTER JOIN (
			SELECT
				csf.id AS id,
				COUNT(cfe.id) AS likeValue
			FROM CP_STUDENT_FREEBOARD csf 
			INNER JOIN CP_FREEBOARD_EMPATHY cfe ON cfe.FREEBOARD_ID = csf.ID
			GROUP BY csf.ID 
			)lkTb ON lkTb.id = t1.id
		ORDER BY freeID DESC
	</select>
	

</mapper>