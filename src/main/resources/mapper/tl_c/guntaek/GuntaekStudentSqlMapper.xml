<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mkfactory.toothless.c.guntaek.mapper.GuntaekStudentSqlMapper">
<!-- 이력서 insert -->
<insert id ="registerSelfIntroduction">
INSERT INTO tl_c_self_introduction VALUES(
	tl_c_self_introduction_seq.nextval,
	#{student_pk},
	0,
	#{answer1},
	#{answer2},
	#{answer3},
	#{answer4}
)
</insert>

<!-- 이력서 개수 -->
<select id = "countSelfIntroduction" resultType ="int">
	SELECT COUNT(*) FROM tl_c_self_introduction
	WHERE student_pk =#{student_pk}
</select>

<!-- 특정 학생이력서 Dto 가져오기 -->
<select id ="getSelfIntroductionDto" resultType = "com.mkfactory.toothless.c.dto.AjdksSelfIntroductionDto">
	SELECT * FROM TL_C_SELF_INTRODUCTION
	WHERE STUDENT_PK = #{student_pk}
</select>

<!-- 모든 학생 Dto 리스트 가져오기 -->
<select id = "getSelfIntroductionDtoList" resultType = "com.mkfactory.toothless.c.dto.AjdksSelfIntroductionDto">
	SELECT * FROM tl_c_self_introduction
</select>

<!-- 이력서 수정 -->
<update id ="updateSelfIntroductionDto">
	UPDATE TL_C_SELF_INTRODUCTION
	SET answer1  = #{answer1}, answer2 = #{answer2}, 
	answer3 =#{answer3}, answer4 = #{answer4}
	WHERE student_pk = #{student_pk}
</update>

<!-- 자격증 insert -->
<insert id = "registerCertification">
INSERT INTO tl_c_certification VALUES(
	tl_c_certification_seq.nextval,
	#{student_pk},
	#{certification_name},
	#{certification_acquisition_date},
	#{certification_file}
)
</insert>


<!-- 특정 학생키의 자격증 DTO 리스트 가져오기-->
<select id = "getCertificationByStudentPk" resultType ="com.mkfactory.toothless.c.dto.AjdksCertificationDto">
	SELECT * FROM tl_c_certification
	WHERE STUDENT_PK = #{student_pk}
</select>

<!-- 특정 자격증 삭제 버튼 -->
<delete id ="deleteCertificationByFile">
	DELETE FROM TL_C_CERTIFICATION
	WHERE certification_file = #{FileName}
</delete>


<!-- 인춘이 형거 학생 데이터 얻어오는거임 (굳이 쓸 이유가 없을듯..) -->
<select id ="getStudentDto" resultType="com.mkfactory.toothless.donot.touch.dto.StudentInfoDto">
SELECT * FROM TL_JIC_STUDENT_INFO 
WHERE STUDENT_PK = #{student_pk}
</select>

<!-- 특정 전공 pk를 통하여 전공이름 select 해오기  -->
<select id = "getDepartmentName" resultType ="String">
SELECT NAME FROM TL_JIC_DEPARTMENT_CATEGORY
WHERE DEPARTMENT_PK = #{department_pk}
</select>

<!-- 특정 교수 pk를 통하여 교수이름 Select 해오기 -->
<select id ="getProfessorName" resultType = "String">
SELECT NAME FROM TL_JIC_PROFESSOR_INFO
WHERE PROFESSOR_PK = #{PROFESSOR_PK}
</select>

<!-- 특정  학생이 몇학기인지 Select 해오기 -->
<select id ="getStudentSemester" resultType ="int">
SELECT COUNT(SEMESTER_PK) FROM TL_JIC_STUDENT_SEMESTER 
WHERE student_pk = (
SELECT student_pk FROM TL_JIC_STUDENT_INFO
WHERE STUDENT_PK =#{student_pk}
)
</select>
<!--  ************************ 이력서 사진에 쓴 쿼리들 .. ******************************** -->

<!-- 이력서 사진 Dto insert.. -->
<insert id ="registerIntroductionImage">
INSERT INTO tl_c_self_introduction_img VALUES(
	#{self_introduction_img_pk},
	#{self_introduction_img}
)
</insert>

<!-- 이력서 사진 Dto insert 될때 서비스에서 pk 얻어오기 -->
<select id ="getIntroduction_img_pk" resultType ="int">
	SELECT tl_c_self_intro_img_seq.nextval FROM DUAL
</select>

<!--  이력서 사진 Dto insert 됨과 동시에  자기소개서의 이력서 사진 코드 UPDATE 하기-->
<update id ="updateIntroduction">
	UPDATE TL_C_SELF_INTRODUCTION
	SET self_introduction_img_pk = #{self_introduction_img_pk}
	WHERE STUDENT_PK = #{student_pk}
</update>


<!-- 이력서 사진 링크 얻어오기 -->
<select id = "getSelfIntroductionFile" resultType ="String">
	SELECT self_introduction_img FROM TL_C_SELF_INTRODUCTION_IMG
	WHERE self_introduction_img_pk = #{self_introduction_img_pk}
</select>

<!--  ************************ 이력서 사진에 쓴 쿼리들 .. ******************************** -->


<!--  ************************ 교육 프로그램에 쓴 쿼리들 ************************************* -->
<!-- 프로그램 신청 -->
<insert id = "RegisterProgramProcess">
INSERT INTO tl_c_internedu_applying values(
	tl_c_internedu_applying_seq.nextval,
	#{internedu_program_pk},
	#{student_pk},
	SYSDATE,
	'N'
)
</insert>

<!-- 신청 여부 -->
<select id ="programToApply" resultType = "com.mkfactory.toothless.c.dto.AjdksInternEduApplying">
	SELECT * FROM tl_c_internedu_applying
	WHERE internedu_program_pk = #{internedu_program_pk}
	AND student_pk = #{student_pk}
</select>


<!--  신청한 프로그램이 마감되었는지 안되었는지 확인하는 쿼리 -->

<select id ="deadProgram" resultType ="com.mkfactory.toothless.c.dto.AjdksInternEduProgramDto">
	<![CDATA[
	SELECT t1.* FROM
	(SELECT ip.* FROM TL_C_INTERNEDU_PROGRAM ip
	WHERE TO_CHAR(ip.DEADLINE_DATE , 'yyyyMMdd') <= SYSDATE)t1
	WHERE t1.internedu_program_pk = #{internedu_program_pk}
	ORDER BY t1.CREATED_AT
	]]>
</select>

<!-- 특정 학생이 신청한 프로그램 프로그램신청Dto List (본인이 신청했던 모든 신청Dto들이 List로 나오게한다.) -->
<select id = "applyProgramListByStudent" resultType = "com.mkfactory.toothless.c.dto.AjdksInternEduApplying">
	SELECT * FROM TL_C_INTERNEDU_APPLYING
	WHERE student_pk = #{student_pk}
 </select>

<!-- 특정 학생이 신청했고 이수한 순수 프로그램Dto List (학생 기준 이수한 교육 프로그램) -->
<select id ="programListByStudent" resultType ="com.mkfactory.toothless.c.dto.AjdksInternEduProgramDto">	
	SELECT * FROM(
	SELECT * FROM TL_C_INTERNEDU_PROGRAM
	WHERE INTERNEDU_PROGRAM_PK IN 
	(SELECT INTERNEDU_PROGRAM_PK  FROM TL_C_INTERNEDU_APPLYING
	WHERE student_pk = #{student_pk}
	AND COMPLETION ='Y'
	))
</select>


<!-- 특정 프로그램에 몇명이 지원했는지  -->
<select id ="getCountPeopleOfProgram" resultType ="int">	
	SELECT COUNT(*) FROM TL_C_INTERNEDU_APPLYING
	WHERE INTERNEDU_PROGRAM_PK = #{internedu_program_pk}
</select>



<!-- 프로그램 신청한 고유 키 가져오기 이수 OK, 학생, 프로그램 외래키로 가져옴 -->
<select id = "getApplyKey" resultType ="int">
	SELECT INTERNEDU_APPLYING_PK  FROM TL_C_INTERNEDU_APPLYING
	WHERE STUDENT_PK = #{student_pk}
	AND INTERNEDU_PROGRAM_PK = #{internedu_program_pk}
	AND COMPLETION ='Y'
</select>


<!-- 학생의 리뷰 등록 -->
<insert id ="registerProgramReview">
	INSERT INTO TL_C_INTERNEDU_REVIEW VALUES(
		tl_c_internEdu_review_seq.nextval,
		#{internedu_applying_pk},
		#{rating},
		#{review},
		SYSDATE
)
</insert>

<!-- 리뷰 등록 여부 확인 -->
<select id ="getCheckReview" resultType ="com.mkfactory.toothless.c.dto.AjdksInternEduReviewDto">
	SELECT * FROM TL_C_INTERNEDU_REVIEW
	WHERE INTERNEDU_APPLYING_PK = #{INTERNEDU_APPLYING_PK}
</select>

<!--  **************************************************************************** -->



</mapper>