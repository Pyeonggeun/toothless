<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mkfactory.toothless.x.hn.mapper.LifeStudentSqlMapper">

	<insert id="insertLectureStudentInfo">
		INSERT INTO tl_x_lecture_student VALUES (
			tl_x_lecture_student_seq.nextval,
			#{open_lecture_key},
			#{life_student_key},
			SYSDATE
		)
	</insert>
	
	<insert id="insertLectureReviewInfo">
		INSERT INTO tl_x_lecture_review VALUES(
			tl_x_lecture_review_seq.nextval,
			#{lecture_student_key},
			#{star_count},
			#{review},
			SYSDATE
		)
	</insert>

	<select id="getReceivingLectureList" resultType="map">
		SELECT txli.credit, txli.name, txll.name AS lecturer_name, txol.open_lecture_key, txol.max_student FROM tl_x_open_lecture txol
		INNER JOIN tl_x_lecture_info txli ON txol.lecture_info_key = txli.lecture_info_key
		INNER JOIN tl_x_life_lecturer txll ON txol.lecturer_key = txll.lecturer_key
		WHERE TO_CHAR(SYSDATE, 'yyyy-MM-dd')
		BETWEEN TO_CHAR(txol.start_apply, 'yyyy-MM-dd')
		AND TO_CHAR(txol.end_apply, 'yyyy-MM-dd')
	</select>
	
	<select id="getCurrentApplyNumberByOpenLectureKey" resultType="int">
		SELECT COUNT(*) FROM tl_x_lecture_student
		WHERE open_lecture_key = #{open_lecture_key}
	</select>
	
	
	<select id="getOpenLectureInfoByOpenLectureKey" resultType="com.mkfactory.toothless.x.dto.OpenLectureDto">
		SELECT * FROM tl_x_open_lecture WHERE open_lecture_key = #{open_lecture_key}
	</select>
	
	<select id="getLectureInfoByLectureInfoKey" resultType="com.mkfactory.toothless.x.dto.LectureInfoDto">
		SELECT * FROM tl_x_lecture_info WHERE lecture_info_key = #{lecture_info_key}
	</select>
	
	<select id="getLectureRoundByLectureInfoKeyAndOpenLectrueKey" resultType="int">
		SELECT t2.round FROM (
			SELECT t1.*, rownum AS round FROM (
				SELECT * FROM tl_x_open_lecture WHERE lecture_info_key = #{lecture_info_key}
				ORDER BY open_date ASC
			)t1
		)t2
		WHERE t2.open_lecture_key = #{open_lecture_key}
	</select>
	
	<select id="getConditionLectureKeyListByLectureInfoKey" resultType="int">
		SELECT condition_lecture_key FROM tl_x_apply_condition WHERE lecture_info_key = #{lecture_info_key}
		ORDER BY condition_lecture_key ASC
	</select>
	
	<select id="getLectureNameByConditionLectureKey" resultType="String">
		SELECT name FROM tl_x_lecture_info WHERE lecture_info_key = #{condition_lecture_key}
	</select>
	
	<select id="getLectureCategoryNameByLectureCategoryKey" resultType="String">
		SELECT category_name FROM tl_x_lecture_category WHERE lecture_category_key = #{lecture_category_key}
	</select>
	
	<select id="getLecturerNameByLecturerKey" resultType="String">
		SELECT name FROM tl_x_life_lecturer WHERE lecturer_key = #{lecturer_key}
	</select>
	
	<select id="isApply" resultType="int">
		SELECT COUNT(*) FROM tl_x_lecture_student WHERE open_lecture_key = #{open_lecture_key} AND life_student_key = #{life_student_key}
	</select>
	
	<select id="isConditionSatisfaction" resultType="int">
		SELECT NVL(t3.lecture_info_key, 0) FROM (
			SELECT condition_lecture_key FROM tl_x_apply_condition WHERE lecture_info_key = (
				SELECT lecture_info_key FROM tl_x_open_lecture WHERE open_lecture_key = #{open_lecture_key}
			)
		)t2
		LEFT JOIN (
			SELECT txol.lecture_info_key FROM (
				SELECT open_lecture_key FROM tl_x_lecture_student WHERE life_student_key = #{life_student_key}
			)t1
			INNER JOIN tl_x_open_lecture txol ON t1.open_lecture_key = txol.open_lecture_key
		)t3 ON t2.condition_lecture_key = t3.lecture_info_key
	</select>
	
	<select id="isOverlapDate" resultType="int">
		SELECT COUNT(*) FROM (
			SELECT * FROM tl_x_open_lecture
			WHERE open_lecture_key = (
				SELECT open_lecture_key FROM tl_x_lecture_student
				WHERE life_student_key = #{life_student_key}
			)
		)t1
		WHERE TO_CHAR((SELECT open_date FROM tl_x_open_lecture WHERE open_lecture_key = #{open_lecture_key}), 'yyyy-MM-dd')
		BETWEEN TO_CHAR(t1.open_date, 'yyyy-MM-dd')
		AND TO_CHAR(t1.close_date, 'yyyy-MM-dd')
	</select>
	
	<select id="getLifeStudentKeyByExternalPk" resultType="int">
		SELECT life_student_key FROM tl_x_life_student WHERE external_pk = #{external_pk}
	</select>
	
	<select id="getOpenLectureInfoList" resultType="com.mkfactory.toothless.x.dto.OpenLectureDto">
	
		SELECT t4.* FROM (
			SELECT t3.*, rownum rnum FROM (
				SELECT txol.* FROM tl_x_open_lecture txol
				INNER JOIN tl_x_lecture_info txli ON txol.lecture_info_key = txli.lecture_info_key
				WHERE TO_CHAR(SYSDATE, 'yyyy-MM-dd')
				BETWEEN TO_CHAR(txol.start_apply, 'yyyy-MM-dd')
				AND TO_CHAR(txol.end_apply, 'yyyy-MM-dd')
				<if test="searchType != null and searchType.length != 0">
					AND txli.lecture_category_key IN 
					<foreach collection="searchType" item="arr" open="(" close=")" separator=",">
						#{arr}
					</foreach>
				</if>
				<if test="searchWord != null">
					AND txli.name LIKE '%'||#{searchWord}||'%'
				</if>
				<if test="searchRecruitment != null and searchRecruitment != 0">
					<choose>
						<when test="searchRecruitment == 1">
							<![CDATA[
								AND max_student > (
							]]>
								SELECT COUNT(*) FROM tl_x_lecture_student txls
								WHERE txls.open_lecture_key = txol.open_lecture_key
							)
						</when>
						<otherwise>
							<![CDATA[
								AND max_student <= (
							]]>
								SELECT COUNT(*) FROM tl_x_lecture_student txls
								WHERE txls.open_lecture_key = txol.open_lecture_key
							)	
						</otherwise>
					</choose>
				</if>
			)t3
		)t4
		<![CDATA[
			WHERE t4.rnum >= (#{pageNumber}-1)*#{eachTotalNumber} + 1 AND t4.rnum <= #{pageNumber}*#{eachTotalNumber}
		]]>
	</select>
	
	<select id="getTotalOpenLectureCount" resultType="int">
		SELECT COUNT(*) FROM (
			SELECT txol.* FROM tl_x_open_lecture txol
			INNER JOIN tl_x_lecture_info txli ON txol.lecture_info_key = txli.lecture_info_key
			WHERE TO_CHAR(SYSDATE, 'yyyy-MM-dd')
			BETWEEN TO_CHAR(txol.start_apply, 'yyyy-MM-dd')
			AND TO_CHAR(txol.end_apply, 'yyyy-MM-dd')
			<if test="searchType != null and searchType.length != 0">
				AND txli.lecture_category_key IN 
				<foreach collection="searchType" item="arr" open="(" close=")" separator=",">
					#{arr}
				</foreach>
			</if>
			<if test="searchWord != null">
				AND txli.name LIKE '%'||#{searchWord}||'%'
			</if>
			<if test="searchRecruitment != null and searchRecruitment != 0">
				<choose>
					<when test="searchRecruitment == 1">
						<![CDATA[
							AND max_student > (
						]]>
							SELECT COUNT(*) FROM tl_x_lecture_student txls
							WHERE txls.open_lecture_key = txol.open_lecture_key
						)
					</when>
					<otherwise>
						<![CDATA[
							AND max_student <= (
						]]>
							SELECT COUNT(*) FROM tl_x_lecture_student txls
							WHERE txls.open_lecture_key = txol.open_lecture_key
						)	
					</otherwise>
				</choose>
			</if>
		)
	</select>
	
	<select id="getLectureCategoryList" resultType="com.mkfactory.toothless.x.dto.LectureCategoryDto">
		SELECT * FROM tl_x_lecture_category
	</select>
	
	<select id="getLectureStudentKeyAndOpenLectureKeyByLifeStudentKey" resultType="map">
		SELECT * FROM (
			SELECT t2.*, rownum rnum FROM (
				SELECT t1.lecture_student_key, t1.open_lecture_key FROM (
					SELECT * FROM tl_x_lecture_student
					WHERE life_student_key = #{life_student_key}
				)t1
				INNER JOIN tl_x_open_lecture txol ON t1.open_lecture_key = txol.open_lecture_key
				<![CDATA[
					WHERE TO_CHAR(txol.close_date, 'yyyy-MM-dd') < TO_CHAR(SYSDATE, 'yyyy-MM-dd')
				]]>
			)t2
		)t3
		<![CDATA[
			WHERE t3.rnum >= (#{pageNumber}-1)*10 + 1 AND t3.rnum <= #{pageNumber}*10
		]]>
	</select>
	
	<select id="getToTalReviewLectureCount" resultType="int">
		SELECT COUNT(*) FROM (
			SELECT * FROM tl_x_lecture_student
			WHERE life_student_key = 21
		)t1
		INNER JOIN tl_x_open_lecture txol ON t1.open_lecture_key = txol.open_lecture_key
		<![CDATA[
			WHERE TO_CHAR(txol.close_date, 'yyyy-MM-dd') < TO_CHAR(SYSDATE, 'yyyy-MM-dd')
		]]>
	</select>
	
	<select id="isReviewRegister" resultType="int">
		SELECT COUNT(*) FROM tl_x_lecture_review WHERE lecture_student_key = #{lecture_student_key}
	</select>
	
	<select id="getLectureReviewInfoByLectureStudentKey" resultType="com.mkfactory.toothless.x.dto.LectureReviewDto">
		SELECT * FROM tl_x_lecture_review WHERE lecture_student_key = #{lecture_student_key}
	</select>
	
	<select id="getLectureStudentKeyByOpenLectureKeyAndLifeStudentKey" resultType="int">
		SELECT lecture_student_key FROM tl_x_lecture_student
		WHERE open_lecture_key = #{open_lecture_key}
		AND life_student_key = #{life_student_key}
	</select>
	
	<select id="getTotalMyLectureCount" resultType="int">
		SELECT COUNT(*) FROM (
		   SELECT * FROM tl_x_lecture_student
		   WHERE life_student_key = #{life_student_key}
		)t1
		INNER JOIN tl_x_open_lecture txol ON t1.open_lecture_key = txol.open_lecture_key
		WHERE 1=1
		<if test="searchType != null and searchType != 0">
			<if test="searchType == 2">
				<![CDATA[
					AND TO_CHAR(SYSDATE, 'yyyy-MM-dd') < TO_CHAR(txol.open_date, 'yyyy-MM-dd')
				]]>
			</if>
			<if test="searchType == 1">
				AND TO_CHAR(SYSDATE, 'yyyy-MM-dd')
				BETWEEN TO_CHAR(txol.open_date, 'yyyy-MM-dd')
				AND TO_CHAR(txol.close_date, 'yyyy-MM-dd')
			</if>
			<if test="searchType == 3">
				<![CDATA[
					AND TO_CHAR(txol.close_date, 'yyyy-MM-dd') < TO_CHAR(SYSDATE, 'yyyy-MM-dd')
				]]>
			</if>
		</if>
	</select>
	
	<select id="getMyOpenLectureKeyList" resultType="int">
		SELECT t2.open_lecture_key FROM (
		   SELECT t1.*, rownum rnum FROM (
		      SELECT t1.* FROM (
		         SELECT * FROM tl_x_lecture_student
		         WHERE life_student_key = #{life_student_key}
		      )t1
		      INNER JOIN tl_x_open_lecture txol ON t1.open_lecture_key = txol.open_lecture_key
		      WHERE 1=1
			<if test="searchType != null and searchType != 0">
				<if test="searchType == 2">
					<![CDATA[
						AND TO_CHAR(SYSDATE, 'yyyy-MM-dd') < TO_CHAR(txol.open_date, 'yyyy-MM-dd')
					]]>
				</if>
				<if test="searchType == 1">
					AND TO_CHAR(SYSDATE, 'yyyy-MM-dd')
					BETWEEN TO_CHAR(txol.open_date, 'yyyy-MM-dd')
					AND TO_CHAR(txol.close_date, 'yyyy-MM-dd')
				</if>
				<if test="searchType == 3">
					<![CDATA[
						AND TO_CHAR(txol.close_date, 'yyyy-MM-dd') < TO_CHAR(SYSDATE, 'yyyy-MM-dd')
					]]>
				</if>
			</if>
		   )t1
		)t2
		<![CDATA[
			WHERE t2.rnum >= (#{pageNumber}-1)*5 + 1 AND t2.rnum <= #{pageNumber}*5
		]]>
	</select>
	
	<select id="getTotalAttendanceCount" resultType="int">
		SELECT COUNT(*) FROM (
			SELECT CASE WHEN TO_CHAR(TO_DATE(DT),'D') IN ('1','7')
		    	THEN '0'
		        ELSE '1' END AS WEEK_DAY,
		        DT
			FROM (
		    	SELECT TO_CHAR(TO_DATE(ST_DT, 'YYYY-MM-DD') + LEVEL - 1, 'YYYY-MM-DD') AS DT
		    	FROM (
		    		SELECT
			        	(SELECT TO_CHAR(open_date, 'YYYYMMDD')
			        	FROM tl_x_open_lecture
			       		WHERE open_lecture_key = #{open_lecture_key}) 
		         	AS ST_DT,             
		            	(SELECT TO_CHAR(close_date, 'YYYYMMDD')
		            	FROM tl_x_open_lecture
		           		WHERE open_lecture_key = #{open_lecture_key})
		            AS END_DT
		            FROM DUAL )
		        <![CDATA[
		        	CONNECT BY LEVEL <=  TO_DATE(END_DT, 'YYYYMMDD') - TO_DATE(ST_DT, 'YYYYMMDD') + 1
		        ]]>
		   )
		)t1
		WHERE t1.week_day = 1
	</select>
	
	<select id="getAttendanceCountByLectureStudentKey" resultType="int">
		SELECT COUNT(*) FROM tl_x_attendance_status
		WHERE lecture_student_key = #{lecture_student_key}
		AND status LIKE '출석'	
	</select>
	
	<select id="getExceptAttendanceAndAbsentCountByLectureStudentKey" resultType="int">
		SELECT COUNT(*) FROM tl_x_attendance_status
		WHERE lecture_student_key = #{lecture_student_key}
		AND status NOT IN ('결석', '출석')
	</select>
	
	<select id="getAvgTestScoreByOpenLectureKey" resultType="int">
		SELECT NVL(FLOOR(AVG(t3.test_point)), 0) FROM (
			SELECT t2.lecture_test_key, NVL(SUM(test_point), 0) AS test_point FROM (
				SELECT * FROM (
					SELECT * FROM tl_x_test_result
					WHERE lecture_test_key IN (
						SELECT lecture_test_key FROM tl_x_lecture_test
						WHERE open_lecture_key = #{open_lecture_key}
					)
				)t1
				INNER JOIN tl_x_question_choice txqc ON t1.question_choice_key = txqc.question_choice_key
				WHERE txqc.answer LIKE 'true'
			)t2
			INNER JOIN tl_x_test_question txtq ON t2.test_question_key = txtq.test_question_key
			GROUP BY t2.lecture_test_key
		)t3
	</select>
	
	<select id="getTotalTestCount" resultType="int">
		SELECT COUNT(*) FROM tl_x_lecture_test
		WHERE open_lecture_key = #{open_lecture_key}
	</select>
	
	<select id="getStudentTotalTestCount" resultType="int">
		SELECT COUNT(*) FROM (
		   SELECT lecture_test_key FROM tl_x_test_result
		   WHERE lecture_student_key = #{lecture_student_key}
		   GROUP BY lecture_test_key
		)
	</select>
	
	<select id="getLectureTestInfoByOpenLectureKey" resultType="com.mkfactory.toothless.x.dto.LectureTestDto">
		SELECT * FROM tl_x_lecture_test
		WHERE open_lecture_key = #{open_lecture_key}
		ORDER BY open_test_day ASC
	</select>
	
	<select id="getStudentTestScoreByLectureTestKey" resultType="int">
		SELECT NVL(SUM(test_point), 0) AS test_point FROM (
		   SELECT * FROM (
		      SELECT * FROM tl_x_test_result
		      WHERE lecture_test_key = #{lecture_test_key}
		   )t1
		   INNER JOIN tl_x_question_choice txqc ON t1.question_choice_key = txqc.question_choice_key
		   WHERE txqc.answer LIKE 'true'
		)t2
		INNER JOIN tl_x_test_question txtq ON t2.test_question_key = txtq.test_question_key
	</select>
	
	<select id="isCompleteTest" resultType="int">
		SELECT COUNT(*) FROM (
			SELECT lecture_test_key FROM tl_x_test_question
			GROUP BY lecture_test_key
		)t1
		WHERE t1.lecture_test_key = #{lecture_test_key}
	</select>

</mapper>